name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.platform.target }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
            ext: .exe

          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
            ext: ''

          # macOS Intel
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
            ext: ''

          # macOS Apple Silicon
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64
            ext: ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform.target }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Build backend
        run: cargo build --release --target ${{ matrix.platform.target }}

      - name: Package binary (Unix)
        if: matrix.platform.os != 'windows-latest'
        run: |
          cd target/${{ matrix.platform.target }}/release
          tar czf ../../../classtop-server-${{ matrix.platform.name }}.tar.gz classtop-server${{ matrix.platform.ext }}
          cd ../../..

      - name: Package binary (Windows)
        if: matrix.platform.os == 'windows-latest'
        shell: pwsh
        run: |
          cd target/${{ matrix.platform.target }}/release
          Compress-Archive -Path classtop-server${{ matrix.platform.ext }} -DestinationPath ../../../classtop-server-${{ matrix.platform.name }}.zip
          cd ../../..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: classtop-server-${{ matrix.platform.name }}
          path: |
            classtop-server-${{ matrix.platform.name }}.tar.gz
            classtop-server-${{ matrix.platform.name }}.zip
          retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure
        run: ls -R artifacts

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}